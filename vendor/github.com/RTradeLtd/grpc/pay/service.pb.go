// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pay

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import request "github.com/RTradeLtd/grpc/pay/request"
import response "github.com/RTradeLtd/grpc/pay/response"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SignerClient is the client API for Signer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignerClient interface {
	GetSignedMessage(ctx context.Context, in *request.SignRequest, opts ...grpc.CallOption) (*response.SignResponse, error)
}

type signerClient struct {
	cc *grpc.ClientConn
}

func NewSignerClient(cc *grpc.ClientConn) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) GetSignedMessage(ctx context.Context, in *request.SignRequest, opts ...grpc.CallOption) (*response.SignResponse, error) {
	out := new(response.SignResponse)
	err := c.cc.Invoke(ctx, "/pay.Signer/GetSignedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignerServer is the server API for Signer service.
type SignerServer interface {
	GetSignedMessage(context.Context, *request.SignRequest) (*response.SignResponse, error)
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_GetSignedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).GetSignedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.Signer/GetSignedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).GetSignedMessage(ctx, req.(*request.SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pay.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignedMessage",
			Handler:    _Signer_GetSignedMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_d703306c5e521a82) }

var fileDescriptor_service_d703306c5e521a82 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x48, 0xac, 0x94, 0x12,
	0x2d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xd1, 0x87, 0xd2, 0x10, 0x39, 0x29, 0xf1, 0xa2, 0xd4,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x7d, 0x18, 0x03, 0x22, 0x61, 0xe4, 0xc3, 0xc5, 0x16, 0x9c,
	0x99, 0x9e, 0x97, 0x5a, 0x24, 0xe4, 0xc4, 0x25, 0xe0, 0x9e, 0x5a, 0x02, 0xe6, 0xa4, 0xf8, 0xa6,
	0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x89, 0xe8, 0xc1, 0x8c, 0x01, 0x89, 0x07, 0x41, 0xd8, 0x52,
	0x62, 0x7a, 0x70, 0x43, 0x20, 0xc2, 0x10, 0x8e, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x50, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0x67, 0x79, 0xf5, 0x9a, 0x00, 0x00, 0x00,
}
