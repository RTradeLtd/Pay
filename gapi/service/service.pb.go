// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import request "github.com/RTradeLtd/Pay/gapi/request"
import response "github.com/RTradeLtd/Pay/gapi/response"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Signer service

type SignerClient interface {
	GetSignedMessage(ctx context.Context, in *request.SignRequest, opts ...grpc.CallOption) (*response.SignResponse, error)
}

type signerClient struct {
	cc *grpc.ClientConn
}

func NewSignerClient(cc *grpc.ClientConn) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) GetSignedMessage(ctx context.Context, in *request.SignRequest, opts ...grpc.CallOption) (*response.SignResponse, error) {
	out := new(response.SignResponse)
	err := grpc.Invoke(ctx, "/models.Signer/GetSignedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signer service

type SignerServer interface {
	GetSignedMessage(context.Context, *request.SignRequest) (*response.SignResponse, error)
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_GetSignedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).GetSignedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Signer/GetSignedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).GetSignedMessage(ctx, req.(*request.SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignedMessage",
			Handler:    _Signer_GetSignedMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0xcd, 0x4f, 0x49, 0xcd,
	0x29, 0x96, 0xe2, 0x2d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x81, 0x08, 0x4b, 0xf1, 0x15, 0xa5,
	0x16, 0x17, 0xe4, 0xe7, 0x15, 0x43, 0x95, 0x19, 0xf9, 0x70, 0xb1, 0x05, 0x67, 0xa6, 0xe7, 0xa5,
	0x16, 0x09, 0x39, 0x71, 0x09, 0xb8, 0xa7, 0x96, 0x80, 0x39, 0x29, 0xbe, 0xa9, 0xc5, 0xc5, 0x89,
	0xe9, 0xa9, 0x42, 0x22, 0x7a, 0x30, 0xdd, 0x20, 0xf1, 0x20, 0x08, 0x5b, 0x4a, 0x4c, 0x0f, 0x6e,
	0x08, 0x44, 0x18, 0xc2, 0x51, 0x62, 0x48, 0x62, 0x03, 0x1b, 0x6a, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xc5, 0x4a, 0x2c, 0x82, 0x8c, 0x00, 0x00, 0x00,
}
